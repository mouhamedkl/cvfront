  autofillForm() {
    // Set default values for personal information
    this.cvForm.patchValue({
      language: 'en',
      name: 'John Doe',
      email: 'johndoe@example.com',
      phone: '1234567890',
      position: 'Software Developer',
      linkedin: 'https://linkedin.com/in/johndoe',
      github: 'https://github.com/johndoe',
     
    });
  this.cvForm1.patchValue({
    skills: 'JavaScript, TypeScript, Angular',
  })
    // Autofill Education section
    const educationArray = this.cvForm.get('education') as FormArray;
    educationArray.clear(); // Clear existing entries if any
    const educationData = [
      {
        degree: 'Bachelor of Science in Computer Science',
        institution: 'University of Example',
        startDate: '2015-08-01',
        endDate: '2019-05-15',
      },
      {
        degree: 'Master of Science in Software Engineering',
        institution: 'Institute of Technology',
        startDate: '2019-08-01',
        endDate: '2021-05-15',
      },
    ];
  
    educationData.forEach(edu => {
      const eduGroup = this.fb.group({
        degree: [edu.degree, Validators.required],
        institution: [edu.institution, Validators.required],
        startDate: [edu.startDate, Validators.required],
        endDate: [edu.endDate, Validators.required],
      });
      educationArray.push(eduGroup);
    });
  
    // Autofill Work Experience section
    const workExperienceArray = this.cvForm1.get('workExperience') as FormArray;
    workExperienceArray.clear(); // Clear existing entries if any
    const workData = [
      {
        position: 'Intern',
        company: 'Tech Company',
        startDate: '2018-06-01',
        endDate: '2018-08-31',
        description: 'Assisted with software development tasks. Collaborated with senior developers to design and implement new features in a web application. Participated in daily stand-up meetings and contributed to project discussions.',
      },
      {
        position: 'Junior Developer',
        company: 'Another Tech Company',
        startDate: '2019-09-01',
        endDate: '2021-12-31',
        description: 'Worked on various projects using Angular and Node.js. Developed RESTful APIs and integrated third-party services. Conducted code reviews and collaborated with cross-functional teams to deliver high-quality software.',
      },
      {
        position: 'Software Developer',
        company: 'Top Tech Firm',
        startDate: '2022-01-01',
        endDate: '2022-01-01',
        description: 'Leading a team of developers for critical projects. Responsible for architecture and design decisions. Implemented best practices for software development and agile methodologies. Conducted performance reviews and contributed to team-building activities.',
      },
    ];
  
    workData.forEach(work => {
      const workGroup = this.fb.group({
        position: [work.position, Validators.required],
        company: [work.company, Validators.required],
        startDate: [work.startDate, Validators.required],
        endDate: [work.endDate, Validators.required],
        description: [work.description, Validators.required],
      });
      workExperienceArray.push(workGroup);
    });
  
    // Autofill Projects section
    const projectsArray = this.cvForm2.get('projects') as FormArray;
    projectsArray.clear(); // Clear existing entries if any
    const projectsData = [
      {
        projectName: 'Project A',
        startDate: '2019-06-01',
        endDate: '2019-12-31',
        description: 'Developed a web application using Angular and Spring Boot. Led the front-end development team to create a responsive and user-friendly interface. Implemented a RESTful API to handle data interactions and worked closely with the UX/UI design team to enhance usability.',
        toolsUsed: 'Angular, Node.js, Bootstrap',
      },
      {
        projectName: 'Project B',
        startDate: '2020-01-01',
        endDate: '2020-06-30',
        description: 'Created a mobile application for a local startup using React Native. Collaborated with designers to implement engaging user experiences and integrated backend services using Firebase. ',
        toolsUsed: 'React Native, Firebase, Expo',
      },
    ];
  
    projectsData.forEach(project => {
      const projectGroup = this.fb.group({
        projectName: [project.projectName, Validators.required],
        startDate: [project.startDate, Validators.required],
        endDate: [project.endDate, Validators.required],
        description: [project.description, Validators.required],
        toolsUsed: [project.toolsUsed, Validators.required],
      });
      projectsArray.push(projectGroup);
    });
  
    // Autofill Certifications section
    const certificationsArray = this.cvForm2.get('certifications') as FormArray;
    certificationsArray.clear(); // Clear existing entries if any
    const certificationsData = [
      {
        title: 'Certified Web Developer',
        institution: 'Certification Institute',
      },
      {
        title: 'AWS Certified Solutions Architect',
        institution: 'Amazon Web Services',
      },
    ];
  
    certificationsData.forEach(cert => {
      const certGroup = this.fb.group({
        title: [cert.title, Validators.required],
        institution: [cert.institution, Validators.required],
      });
      certificationsArray.push(certGroup);
    });
  
    // Autofill Organizations section
    const organizationsArray = this.cvForm2.get('organizations') as FormArray;
    organizationsArray.clear(); // Clear existing entries if any
    const organizationsData = [
      {
        name: 'Tech Organization',
        role: 'Member',
      },
      {
        name: 'Open Source Community',
        role: 'Contributor',
      },
    ];
  
    organizationsData.forEach(org => {
      const orgGroup = this.fb.group({
        name: [org.name, Validators.required],
        role: [org.role, Validators.required],
      });
      organizationsArray.push(orgGroup);
    });
  
    // Autofill Languages Spoken section
    const languagesSpokenArray = this.cvForm1.get('languagesSpoken') as FormArray;
    languagesSpokenArray.clear(); // Clear existing entries if any
    const languagesData = [
      {
        lang: 'English',
      },
      {
        lang: 'Spanish',
      },
    ];
  
    languagesData.forEach(lang => {
      const langGroup = this.fb.group({
        lang: [lang.lang, Validators.required],
      });
      languagesSpokenArray.push(langGroup);
    });
  }